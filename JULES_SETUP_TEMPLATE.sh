#!/bin/bash
# ==============================================================================
# ================ SCRIPT DE SETUP UNIVERSAL (VERS√ÉO DEFINITIVA v4) ==============
# ==============================================================================
# INSTRU√á√ïES: Este √© o template final e corrigido. O conte√∫do deste arquivo
# deve ser chamado na interface do Jules com o comando:
# source JULES_SETUP_TEMPLATE.sh
#
# v4: Feito o "hardcode" da vers√£o do Node.js para evitar falhas de lookup
#     de rede no ambiente de execu√ß√£o. Esta √© a abordagem mais robusta.
# ==============================================================================

# Saia imediatamente se qualquer comando falhar.
set -e

echo "üöÄ Iniciando Setup Universal (Vers√£o Definitiva v4)..."
echo "   Aplicando as permiss√µes corretas para cada tarefa."
echo "--------------------------------------------------------"


# --- ETAPA 1: DEPEND√äNCIAS DE SISTEMA ESSENCIAIS ---
echo "üîß [ETAPA 1/5] Instalando depend√™ncias de sistema (APT)..."
sudo apt-get update
sudo apt-get install -y \
    build-essential \
    git \
    curl \
    wget \
    unzip \
    jq \
    php \
    php-cli \
    php-mbstring \
    php-xml \
    composer \
    python3 \
    python3-pip \
    python3-venv

echo "--------------------------------------------------------"


# --- ETAPA 2: CONFIGURA√á√ÉO DO AMBIENTE NODE.JS (via NVM) ---
echo "üü¢ [ETAPA 2/5] Configurando ambiente Node.js de forma robusta..."
export NVM_DIR="$HOME/.nvm"
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# [CORRE√á√ÉO v4] Usando uma vers√£o LTS espec√≠fica para evitar falhas de rede.
# Node.js 22 √© a vers√£o LTS ativa em 2025.
HARDCODED_LTS_VERSION="22"

echo "   -> Instalando e usando a vers√£o LTS espec√≠fica: Node.js ${HARDCODED_LTS_VERSION}"
nvm install "${HARDCODED_LTS_VERSION}"
nvm use "${HARDCODED_LTS_VERSION}"

echo "Node.js instalado na vers√£o: $(node -v)"
echo "NPM instalado na vers√£o: $(npm -v)"


echo "--------------------------------------------------------"


# --- ETAPA 3: INSTALA√á√ÉO DE DEPEND√äNCIAS PHP (COMPOSER) ---
echo "üêò [ETAPA 3/5] Procurando e instalando depend√™ncias PHP..."
find . -name 'composer.json' -not -path '*/vendor/*' -print0 | while IFS= read -r -d $'\0' file; do
    dir=$(dirname "$file")
    echo "   -> Encontrado projeto PHP em '$dir'. Instalando depend√™ncias..."
    (cd "$dir" && composer install)
done
echo "Depend√™ncias PHP instaladas."

echo "--------------------------------------------------------"

# --- ETAPA 4: INSTALA√á√ÉO DE DEPEND√äNCIAS NODE.JS (NPM) ---
echo "üì¶ [ETAPA 4/5] Procurando e instalando depend√™ncias Node.js..."
find . -name 'package.json' -not -path '*/node_modules/*' -print0 | while IFS= read -r -d $'\0' file; do
    dir=$(dirname "$file")
    echo "   -> Encontrado projeto Node.js em '$dir'. Instalando depend√™ncias..."
    (cd "$dir" && npm ci || npm install)
done
echo "Depend√™ncias Node.js instaladas."

echo "--------------------------------------------------------"

# --- ETAPA 5: INSTALA√á√ÉO DE DEPEND√äNCIAS PYTHON (PIP) ---
echo "üêç [ETAPA 5/5] Procurando e instalando depend√™ncias Python..."
find . -name 'requirements.txt' -not -path '*/venv/*' -print0 | while IFS= read -r -d $'\0' file; do
    dir=$(dirname "$file")
    echo "   -> Encontrado projeto Python em '$dir'. Criando venv e instalando..."
    (
        cd "$dir" && \
        python3 -m venv venv && \
        source venv/bin/activate && \
        pip install -r requirements.txt
    )
done
echo "Depend√™ncias Python instaladas."

echo "--------------------------------------------------------"
echo "‚úÖ‚ú® Setup Universal conclu√≠do! O ambiente est√° pronto para TUDO, com as permiss√µes corretas."
