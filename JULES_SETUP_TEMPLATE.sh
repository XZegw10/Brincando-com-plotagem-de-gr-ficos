#!/bin/bash
# ==============================================================================
# ================ SCRIPT DE SETUP UNIVERSAL (VERS√ÉO DEFINITIVA) ===============
# ==============================================================================
# INSTRU√á√ïES: Este √© o template final e corrigido. O conte√∫do deste arquivo
# deve ser chamado na interface do Jules com o comando:
# source JULES_SETUP_TEMPLATE.sh
# ==============================================================================

# Saia imediatamente se qualquer comando falhar.
set -e

echo "üöÄ Iniciando Setup Universal (Vers√£o Definitiva)..."
echo "   Aplicando as permiss√µes corretas para cada tarefa."
echo "--------------------------------------------------------"


# --- ETAPA 1: DEPEND√äNCIAS DE SISTEMA ESSENCIAIS ---
echo "üîß [ETAPA 1/5] Instalando depend√™ncias de sistema (APT)..."
# [PERMISS√ÉO CORRETA] Usamos 'sudo' aqui porque 'apt-get' modifica o sistema
# operacional base. √â o √∫nico local onde privil√©gios de administrador s√£o necess√°rios.
sudo apt-get update
sudo apt-get install -y \
    build-essential \
    git \
    curl \
    wget \
    unzip \
    jq \
    php \
    php-cli \
    php-mbstring \
    php-xml \
    composer \
    python3 \
    python3-pip \
    python3-venv

echo "--------------------------------------------------------"


# --- ETAPA 2: CONFIGURA√á√ÉO DO AMBIENTE NODE.JS (via NVM) ---
# [PERMISS√ÉO CORRETA] NVM √© executado com permiss√£o de usu√°rio, pois gerencia
# o Node.js dentro do diret√≥rio 'home' do usu√°rio, sem afetar o sistema.
echo "üü¢ [ETAPA 2/5] Configurando ambiente Node.js..."
export NVM_DIR="$HOME/.nvm"
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
nvm install --lts
nvm use --lts
echo "Node.js instalado na vers√£o: $(node -v) via NVM."

echo "--------------------------------------------------------"


# --- ETAPA 3, 4, 5: INSTALA√á√ÉO DE DEPEND√äNCIAS DE PROJETOS ---
# [PERMISS√ÉO CORRETA] Comandos de projeto como composer, npm e pip rodam
# SEM 'sudo' para evitar problemas de propriedade de arquivos. Eles operam
# dentro da pasta do seu projeto, que pertence ao usu√°rio normal.

echo "üêò [ETAPA 3/5] Procurando e instalando depend√™ncias PHP..."
find . -name 'composer.json' -not -path '*/vendor/*' -print0 | while IFS= read -r -d $'\0' file; do
    dir=$(dirname "$file")
    echo "   -> Encontrado projeto PHP em '$dir'. Instalando depend√™ncias..."
    (cd "$dir" && composer install)
done
echo "Depend√™ncias PHP instaladas."

echo "--------------------------------------------------------"

echo "üì¶ [ETAPA 4/5] Procurando e instalando depend√™ncias Node.js..."
find . -name 'package.json' -not -path '*/node_modules/*' -print0 | while IFS= read -r -d $'\0' file; do
    dir=$(dirname "$file")
    echo "   -> Encontrado projeto Node.js em '$dir'. Instalando depend√™ncias..."
    (cd "$dir" && npm ci || npm install)
done
echo "Depend√™ncias Node.js instaladas."

echo "--------------------------------------------------------"

echo "üêç [ETAPA 5/5] Procurando e instalando depend√™ncias Python..."
find . -name 'requirements.txt' -not -path '*/venv/*' -print0 | while IFS= read -r -d $'\0' file; do
    dir=$(dirname "$file")
    echo "   -> Encontrado projeto Python em '$dir'. Criando venv e instalando..."
    (
        cd "$dir" && \
        python3 -m venv venv && \
        source venv/bin/activate && \
        pip install -r requirements.txt
    )
done
echo "Depend√™ncias Python instaladas."

echo "--------------------------------------------------------"
echo "‚úÖ‚ú® Setup Universal conclu√≠do! O ambiente est√° pronto para TUDO, com as permiss√µes corretas."
